<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ehui&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-08T03:27:53.977Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ehui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++：智能指针</title>
    <link href="http://example.com/2021/03/08/C++%EF%BC%9A%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <id>http://example.com/2021/03/08/C++%EF%BC%9A%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</id>
    <published>2021-03-08T11:13:00.000Z</published>
    <updated>2021-03-08T03:27:53.977Z</updated>
    
    <content type="html"><![CDATA[<p>智能指针的定义、如何实现以及C++STL库中智能指针的使用。<a id="more"></a></p><h2 id="什么是智能指针？"><a href="#什么是智能指针？" class="headerlink" title="什么是智能指针？"></a>什么是智能指针？</h2><p>智能指针与普通类行为相似，由用户创建的对象，最后由智能指针负责删除。</p><p>智能指针解决了指针之间复制控制问题，提高了程序的安全性。</p><p><img src="https://i.loli.net/2021/03/08/xZTbnQOok8aEW56.png"></p><h2 id="如何实现智能指针？"><a href="#如何实现智能指针？" class="headerlink" title="如何实现智能指针？"></a>如何实现智能指针？</h2><p>常用的实现智能指针的方法（&lt;&lt;C++ Primer 4th Edition&gt;&gt;中）是==使用计数==，使用一个计数器来记录指向一个对象的指针个数。具体实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    U_ptr *u_ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    SmartPtr(<span class="keyword">int</span>* p, <span class="keyword">int</span> i): val(i), u_ptr(<span class="keyword">new</span> U_ptr(p))&#123; &#125;;</span><br><span class="line">    SmartPtr(<span class="keyword">const</span> SmartPtr&amp; orig):u_ptr(orig.u_ptr), val(orig.val)&#123;</span><br><span class="line">        ++u_ptr-&gt;use;</span><br><span class="line">    &#125;;</span><br><span class="line">    SmartPtr&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SmartPtr&amp;);</span><br><span class="line">    ~SmartPtr()&#123;</span><br><span class="line">        <span class="keyword">if</span> (--u_ptr-&gt;use == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> u_ptr;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SmartPtr&amp; SmartPtr::<span class="keyword">operator</span>=(<span class="keyword">const</span> SmartPtr&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    rhs.u_ptr-&gt;use++;</span><br><span class="line">    <span class="keyword">if</span> (--u_ptr-&gt;use == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> u_ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    u_ptr = rhs.u_ptr;</span><br><span class="line">    val = rhs.val;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">U_ptr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span>* ip;</span><br><span class="line">    <span class="keyword">size_t</span> use;</span><br><span class="line">    U_ptr(<span class="keyword">int</span>* p): ip(p), use(<span class="number">1</span>)&#123; &#125;;</span><br><span class="line">    ~U_ptr();</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">U_ptr::~U_ptr()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一个U_ptr的类实现计数器功能，每新增一个指针，使用use变量记录。SmartPtr类的构造函数、复制构造函数和赋值操作符都得自定义。</p><h2 id="STL中的智能指针"><a href="#STL中的智能指针" class="headerlink" title="STL中的智能指针"></a>STL中的智能指针</h2><p>定义在memory头文件中。</p><ul><li><del>auto_ptr（deprecated）</del></li><li>unique_ptr</li><li>shared_ptr</li></ul><p>auto_ptr与unique_ptr原理相同，保证最终只有一个指针指向对象。它们的不同之处在于unique_ptr能够在编译阶段报错，以及编译器允许unique_ptr短暂存在（可存在于右值）。</p><p>shared_ptr采用使用计数的原理实现。</p><p>使用示例程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; <span class="title">demo</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; <span class="title">temp</span><span class="params">(<span class="keyword">new</span> <span class="built_in">std</span>::<span class="built_in">string</span>(s))</span></span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// std::auto_ptr&lt;std::string&gt; a(new std::string(&quot;hi&quot;));//1</span></span><br><span class="line">    <span class="comment">// std::auto_ptr&lt;std::string&gt; b = a;//2</span></span><br><span class="line">    <span class="comment">// std::unique_ptr&lt;std::string&gt; a(new std::string(&quot;hi&quot;));//3</span></span><br><span class="line">    <span class="comment">// std::unique_ptr&lt;std::string&gt; b(demo(&quot;Hello&quot;));//4</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; <span class="title">a</span><span class="params">(<span class="keyword">new</span> <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;hi&quot;</span>))</span></span>;<span class="comment">//5</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; b = a;<span class="comment">//6</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *b &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//a</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//b</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行1+2+a+b时，编译通过，运行报错（Segmentation fault）。</p><p>运行3+4+a+b时，编译通过，运行结果符合要求。</p><p>运行5+6+a+b时，编译通过，运行结果符合要求。</p><h2 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><p><a href="https://www.cnblogs.com/lanxuezaipiao/p/4132096.html">https://www.cnblogs.com/lanxuezaipiao/p/4132096.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;智能指针的定义、如何实现以及C++STL库中智能指针的使用。</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://example.com/2021/02/22/%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2021/02/22/%E6%B5%8B%E8%AF%95/</id>
    <published>2021-02-22T09:28:52.000Z</published>
    <updated>2021-03-08T03:27:53.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>Hello，hexo-next!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;p&gt;Hello，hexo-next!&lt;/p&gt;
</summary>
      
    
    
    
    <category term="测试" scheme="http://example.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="http://example.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
